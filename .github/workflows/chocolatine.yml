name: Chocolatine

env:
    MIRROR_URL: ""
    EXECUTABLES: "test_choco"

on:
    push:
        branches-ignore:
            - 'ga-ignore-*'
    pull_request:
        branches-ignore:
            - 'ga-ignore-*'

jobs:
    check_coding_style:
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/epitech/coding-style-checker:latest
        steps:
            - uses: actions/checkout@v4.1.2
            - run: check.sh $(pwd) $(pwd)
            - name: Create annotation for coding-style
              run: |
                if [ -s "coding-style-reports.log" ]; then
                  while IFS= read -r line; do
                   file_path=$(echo "$line" | cut -d ':' -f1)
                   error_line=$(echo "$line" | cut -d ':' -f2)
                   error_type=$(echo "$line" | cut -d ':' -f3 | awk '{print toupper($1)}')
                   error_message="coding style error: $file_path"
                   error_code=$(echo "$line" | cut -d ':' -f4)
                   echo "::error title=$error_type $error_message#L$error_line ::$error_code"
                  done < "coding-style-reports.log"
                  exit 1
                fi

    check_program_compilation:
        runs-on: ubuntu-latest
        needs: [check_coding_style]
        container:
            image: epitechcontent/epitest-docker
        timeout-minutes: 2
        steps:
            - uses: actions/checkout@v4.1.2
            - run: make
              timeout-minutes: 2
            - run: make clean
            - run: |
                IFS=',' read -ra EXECUTABLES <<< "$EXECUTABLES"
                for exe in "${EXECUTABLES[@]}"; do
                  if [ ! -x "$exe" ]; then
                    echo "Error: $exe is either missing or not executable"
                    exit 1
                  fi
                done

    run_tests:
        runs-on: ubuntu-latest
        container:
            image: epitechcontent/epitest-docker
        needs: [check_program_compilation]
        timeout-minutes: 2
        steps:
            - uses: actions/checkout@v4.1.2
            - run: make test_run
              timeout-minutes: 2
    
    push_to_mirror:
        runs-on: ubuntu-latest
        needs: [run_tests]
        if: github.event_name == 'push'
        steps:
            - uses: actions/checkout@v4.1.2
            - uses: pixta-dev/repository-mirroring-action@v1.1.1
              with:
                target_repo_url: ${{ env.MIRROR_URL }}
                ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
